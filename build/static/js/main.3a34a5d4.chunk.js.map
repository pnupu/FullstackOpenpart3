{"version":3,"sources":["komponentit/Personform.js","komponentit/Filter.js","komponentit/Persons.js","services/contacts.js","komponentit/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Personfrom","addname","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","Filter","namesToShow","handleshown","Person","props","name","number","onClick","handleDelete","Persons","numbersToShow","map","person","i","key","id","baseurl","axios","get","then","responce","data","post","delete","put","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","showAll","setShowAll","setNamesToShow","setMessage","setClassName","useEffect","console","log","contactServise","initialcontacts","filter","includes","event","target","Personform","preventDefault","add","personid","forEach","nameObject","returnedContact","concat","setTimeout","window","confirm","catch","error","names","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a34a5d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst Personfrom = ({ addname, newName, newNumber, handleNameChange, handleNumberChange}) => {\r\n    return (\r\n      <div>\r\n        <form onSubmit={addname}>\r\n          <div>\r\n            name: <input value={newName} onChange={handleNameChange}/>\r\n          </div>\r\n          <div>\r\n            number: <input value={newNumber} onChange={handleNumberChange}/>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n  \r\n    )\r\n  }\r\n\r\nexport default Personfrom","import React from 'react'\r\n\r\n\r\n\r\nconst Filter = ({ namesToShow, handleshown}) => {\r\n    return (\r\n        <div>\r\n          filter shown with <input value={namesToShow} onChange={handleshown}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n\r\n\r\nconst Persons = ({ numbersToShow, handleDelete}) => {\r\n    return(\r\n        <div>\r\n            {numbersToShow.map((person, i) =>\r\n                <Person key={i} name={person.name} number={person.number} handleDelete={() => handleDelete(person.id, person.name)}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Person = (props) =>{\r\n    return(\r\n        <div>\r\n            {props.name} {props.number} \r\n            <button onClick={props.handleDelete}>delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst baseurl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseurl)\r\n    return request.then(responce => responce.data)\r\n}\r\n\r\nconst create = newName => {\r\n    const request = axios.post(baseurl, newName)\r\n    return request.then(responce => responce.data)\r\n}\r\n\r\nconst remove = id =>{\r\n    return axios.delete(`${baseurl}/${id}`)\r\n}\r\n\r\nconst update = (id, newName) => {\r\n    return axios.put(`${baseurl}/${id}`, newName)\r\n}\r\nexport default {getAll, create, remove, update}","import React from 'react'\r\n\r\nconst Notification = ({ message, className }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  \r\n  return (\r\n    <div className={className}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Personform from './komponentit/Personform'\nimport Filter from './komponentit/Filter'\nimport Persons from './komponentit/Persons'\nimport contactServise from './services/contacts'\nimport './index.css'\nimport Notification from './komponentit/Notification'\n\n\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showAll, setShowAll] = useState(true)\n  const [ namesToShow, setNamesToShow] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ className, setClassName ] = useState(\"success\")\n\n  useEffect(() => {\n    console.log('effect')\n    contactServise\n      .getAll()\n      .then(initialcontacts => {\n        console.log('promise fulfilled')\n        setPersons(initialcontacts)\n    })\n  }, [])\n\n  const addname = (event) => {\n    event.preventDefault()\n    let add = true\n    let personid = 0\n    \n    persons.forEach((person) => {\n      if(person.name === newName){\n        add = false\n        personid = person.id\n      }\n    })\n\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    if(!(add)){\n      let result = window.confirm(`${newName} is already included would you like to replace the number`)\n      if(result){\n        contactServise\n        .update(personid, nameObject)\n        .then(setPersons(persons.map(person => person.id !== personid ? person : nameObject )))\n        .catch(error => {\n          setClassName(\"error\")\n          setMessage(\n            `${newName} is deleted from the server`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          setPersons(persons.filter(person => person.id !== personid))\n        })\n      }\n    } else {\n      \n      contactServise\n      .create(nameObject)\n      .then(returnedContact => {\n        console.log(returnedContact)\n        setPersons(persons.concat(returnedContact))\n      })\n      \n      setClassName(\"success\")\n      setMessage(`Added ${newName}`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n    \n    setNewName('')\n    setNewNumber('')\n  }\n  \n  \n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n  setNewNumber(event.target.value)\n  }\n  \n  const handleshown = (event) => {\n  setNamesToShow(event.target.value)\n  if(!(event.target.value === '')){\n    setShowAll(false)\n  }\n  \n  }\n  const handleDelete = (id, name) =>{\n    let result = window.confirm(`Do you really want to delete ${name} ?`);\n    \n    if(result){\n      contactServise\n        .remove(id)\n        .then(\n          setPersons(persons.filter(names => names.id !== id)),\n          setClassName(\"success\"),\n          setMessage(`Deleted ${name}`),\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          )\n        .catch(error => {\n          setClassName(\"error\")\n          setMessage(\n            `${name} is already deleted from the server`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          setPersons(persons.filter(names => names.id !== id))\n        })\n      \n    }\n  }\n  const numbersToShow = showAll ? persons : persons.filter(name => name.name.includes(namesToShow))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} className={className}/>\n        <Filter namesToShow={namesToShow} handleshown={handleshown}/>\n      <h2>add a new</h2>\n      <Personform addname={addname} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n        <Persons numbersToShow={numbersToShow} handleDelete={handleDelete}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}